server:
  port: 8201
#  servlet:
#    context-path:
  compression:
    enabled: true #数据压缩
    mime-types: application/json,text/html,text/xml,text/plain,text/css,text/javascript,application/javascript #支持压缩的MIME类型列表，以逗号分隔
    min-response-size: 2048 #当前大于2kb则进行压缩-执行压缩所需的最小“Content-Length”值。单位：字节,
management: #开启SpringBoot Admin的监控
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
spring:
  application:
    name: pf-gateway
  profiles:
    active: "@spring.profiles.active@"
  servlet:
    multipart:
      enabled: true # 是否启用分段上传支持。
      max-file-size: 10MB # 最大文件大小。值可以使用后缀“MB”或“KB”分别表示兆字节或千字节。
      max-request-size: 250MB # 最大请求大小。值可以使用后缀“MB”或“KB”分别表示兆字节或千字节。
  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848 # Nacos 注册中心服务端地址
        group: DEFAULT_GROUP # 设置服务所处的分组
        weight: 1 # 权重-取值范围 1 到 100，数值越大，权重越大
        cluster-name: DEFAULT # 配置成Nacos集群名称
        username: nacos11
        password: nacos
      config:
        server-addr: 127.0.0.1:8848 # Nacos 配置中心服务端地址
        username: nacos11
        password: nacos
        group: DEFAULT_GROUP # 设置服务所处的分组
        file-extension: yaml
    sentinel:
      eager: true # 是否提前触发 Sentinel 初始化
      filter:
        enabled: false # 启用实例CommonFilter
      datasource: # 动态数据源支持
        ds1: # ds1, ds2, ds3, ds4 是ReadableDataSource的名字，可随意编写。后面的 file ，zk ，nacos , apollo 就是对应具体的数据源，它们后面的配置就是这些具体数据源各自的配置。
          nacos:
            server-addr: ${spring.cloud.nacos.config.server-addr}
            username: ${spring.cloud.nacos.config.username}
            password: ${spring.cloud.nacos.config.password}
            data-id: ${spring.application.name}-flow-rules # 配置的 data-id
            group: DEFAULT_GROUP # 配置分组
            data-type: json # 表示 Converter 类型，Spring Cloud Alibaba Sentinel 默认提供两种内置的值，分别是 json 和 xml (不填默认是json)
            rule-type: gw-flow # 配置表示该数据源中的规则属于哪种类型的规则(flow，degrade，authority，system, param-flow, gw-flow, gw-api-group)
    gateway:
      discovery:
        locator:
#          enabled: true              #uri后面追加服务名称-默认false
          lower-case-service-id: true #使用小写service-id
      routes: #配置路由路径
        - id: pf-auth
#          uri: http://localhost:8001         #匹配后提供服务的路由地址
          uri: lb://pf-auth                 #匹配后提供服务的路由地址（http://ip:port），lb后跟提供服务的微服务的名，不要写错
          predicates:
            - Path=/pf-auth/**                    #断言，路径相匹配的进行路由
#          filters:
#            - StripPrefix=1                      # 切割路径个数 ex：/a/b ==> /b
        - id: pf-system
          uri: lb://pf-system
          predicates:
            - Path=/pf-system/**
        - id: pf-test
          uri: lb://pf-test
          predicates:
            - Path=/pf-test/**
#      globalcors: # 全局设置跨域
#        corsConfigurations:
#          '[/**]':
#            allowCredentials: true # 允许cookies跨域
#            allowedOrigins: "*" # 允许向该服务器提交请求的URI，*表示全部允许
#            allowedHeaders: "*" # 允许访问的头信息,*表示全部
#            allowedMethods: # 允许提交请求的方法，*表示全部允许
#              - OPTIONS
#              - HEAD
#              - GET
#              - POST
#              - PUT
#              - DELETE
#              - PATCH
#            maxAge: 18000 # 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:${server.port}/pf-auth/rsa/publicKey #配置RSA的公钥访问地址
ribbon:
  eager-load:
    enabled: true
    clients: pf-auth, pf-system
secure:
  ignore:
    ignoreds: #配置白名单路径            #      /**/oauth/**,
      /doc.html,
      /swagger-resources/**,
      /swagger/**,
      /**/**/v2/api-docs,
      /**/*.js,
      /**/*.css,
      /**/*.png,
      /**/*.ico,
      /webjars/**,
      /actuator/**,

      /pf-system/api/v1/**/permitAll/**,
      /pf-system/api/v1/sysUserInfo/permitAll/refreshToken,
      /pf-auth/rsa/publicKey,
      /pf-test/**,
#客户端版本号，在监控中心显示
info:
  version: "@project.version@" #客户端版本号，在监控中心显示  | 监控中心地址
  owner: pf
  name: "@project.name@"
  description: "@project.description@"
  spring-boot-version: "@project.parent.version@"
logging:
  config: classpath:logback-spring/logback-spring-${spring.profiles.active}.xml
